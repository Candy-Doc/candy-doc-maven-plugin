name: release

on:
  push:
    tags:
      - 'v*'
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

      - name: Storing Previous tag value
        run: echo "GITHUB_TAG_VERSION=$(echo ${{ steps.previoustag.outputs.tag }} \
          | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')" >> $GITHUB_ENV
      - name: Splitting version
        run: |
          IFS='.' read -r -a result <<< $GITHUB_TAG_VERSION
          echo "GITHUB_MAJOR_VERSION=$(echo ${result[0]})" >> $GITHUB_ENV
          echo "GITHUB_MINOR_VERSION=$(echo ${result[1]})" >> $GITHUB_ENV


      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Configure Git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Major Maven release
        if: ${{ $GITHUB_MAJOR_VERSION > ${parsedVersion.majorVersion} }}
        run: |
          mvn build-helper:parse-version versions:set \
          release:prepare \
          -DdevelopmentVersion=\${parsedVersion.nextMajorVersion}.1-SNAPSHOT \
          -Dmaven.javadoc.skip=true -DskipTests=true \
          -DreleaseVersion=\${parsedVersion.nextMajorVersion}.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Minor Maven release
        if: ${{ $GITHUB_MINOR_VERSION > ${parsedVersion.minorVersion} }}
        run: |
          mvn build-helper:parse-version versions:set \
          release:prepare \
          -DdevelopmentVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}-SNAPSHOT \
          -Dmaven.javadoc.skip=true -DskipTests=true \
          -DreleaseVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
